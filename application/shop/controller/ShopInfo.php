<?php
/**
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.4.28
 * Time: 09:04
 */

namespace app\shop\controller;


use app\common\model\RongYun;
use app\common\model\Shop;

class ShopInfo extends ShopBase
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
    }


    public function change_password()
    {
        if (request()->isAjax()) {
            $old_password = input('post.old_password');
            $new_pasword = input('post.new_password');
            $shopModel = new Shop();
            $shop = $shopModel->where('id', 'eq', SHOP_ID)->find();
            if ($shop) {
                if (md5($old_password) == $shop['password']) {
                    $shop->password = md5($new_pasword);
                    if ($shop->save()) {
                        exit_json();
                    } else {
                        exit_json(-1, '修改失败');
                    }
                } else {
                    exit_json(-1, '密码错误');
                }
            } else {
                exit_json(-1, '店铺不存在');
            }
        } else {
            return $this->fetch();
        }
    }

    /**
     * 设置店铺基本信息
     * @return mixed
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function baseInfo()
    {
        $shopModel = new Shop();
        if (request()->isAjax()) {
            $res = $shopModel->allowField(true)->save($_POST, ['id' => SHOP_ID]);
            //重置商品销售价格
            $discount = input('post.discount');
            if($discount>0 && $discount<=1){
                $good_ids = model('goods')->where(['shop_id'=>SHOP_ID, 'active_id'=>0])->column('id');
                db()->query("update ybt_goods set active_price=sale_price*$discount where id in (".join(',', $good_ids).")");
                db()->query("update ybt_goods_prop set prop_active_price=prop_price*$discount where good_id in (".join(',', $good_ids).")");
            }
            if ($res) {
                $shop = $shopModel->getShopInfo(SHOP_ID);
                $rongYun = new RongYun();
                $rongYun->refresh('shop' . SHOP_ID, $shop['shopname'], __URL__ . $shop['shoplogo']);
                exit_json();
            } else {
                exit_json(-1, '保存失败');
            }
        } else {
            $shop = $shopModel->getShopInfo(SHOP_ID);
            $this->assign('shop', $shop);
            return $this->fetch();
        }
    }

    /**
     * 拉取高德地图
     * @return mixed
     */
    public function getLocation()
    {
        $geo_web_key = config('geo_web_key');
        $this->assign('key', $geo_web_key);
        return $this->fetch();

    }

    /**
     * 上传店铺logo
     */
    public function shop_logo()
    {
        $file = request()->file('file');
        if ($file) {
            $desPath = __UPLOAD__ . '/shoplogo';
            if (!is_dir($desPath)) {
                mkdir($desPath, '0777');
            }
            $info = $file->move($desPath, md5(microtime() . rand(1000, 9999)));
            if ($info) {
                $saveName = $info->getSaveName();
                $path = "/upload/shoplogo/" . $saveName;
                $img = "<input type='hidden' name='shoplogo' value='" . $path . "'/>";
                exit_json(1, '操作成功', $img);
            } else {
                // 上传失败获取错误信息
                exit_json(-1, $file->getError());
            }
        } else {
            exit_json(-1, '图片不存在');
        }
    }

    /**
     * 店铺营业时间
     */
    public function openTime()
    {
        $time = db('shop_open_time')->where('shop_id', SHOP_ID)->find();
        if (request()->isAjax()) {
            $data = input('post.');
            if ($time['shop_id']) {
                db('shop_open_time')->where('shop_id', $time['shop_id'])->update($data);
            } else {
                $data['shop_id'] = SHOP_ID;
                db('shop_open_time')->insert($data);
            }
            exit_json();
        }
        $this->assign('time', $time);
        return $this->fetch();
    }

    /**
     * 店铺配送时间
     */
    public function dispatchTime()
    {
        $time = db('shop_dispatch_time')->where('shop_id', SHOP_ID)->find();
        if (request()->isAjax()) {
            $data = input('post.');
            if ($time['shop_id']) {
                db('shop_dispatch_time')->where('shop_id', $time['shop_id'])->update($data);
            } else {
                $data['shop_id'] = SHOP_ID;
                db('shop_dispatch_time')->insert($data);
            }
            exit_json();
        }
        $this->assign('time', $time);
        return $this->fetch();
    }

    /**
     * 配送区域设置
     */
    public function dispatchArea()
    {

        $areaList = model('ShopDispatchArea')->where('shop_id', SHOP_ID)->select();
        $shop = model('shop')->where('id', SHOP_ID)->find();
        $location = false;
        if ($shop['location']) {
            $location = true;
        }
        $this->assign('location', $location);
        $this->assign('areaList', $areaList);
        return $this->fetch();
    }

    /**
     * 添加小区
     */
    public function areaAdd()
    {
        $shop = model('shop')->where('id', SHOP_ID)->find();
        if (request()->isAjax()) {
            $locations = input('location');
            $l_arr = explode('@', $locations);
            foreach ($l_arr as $l) {
                $jwd_name = explode(':', $l);
                $jwd = $jwd_name[0];
                $name = $jwd_name[1];
                $area = db('shop_dispatch_area')->where([
                    'shop_id' => SHOP_ID,
                    'residential_name' => $name,
                    'lat' => explode(',', $jwd)[1],
                    'lng' => explode(',', $jwd)[0]
                ])->find();
                if ($area['id'] > 0) {
                    continue;
                } else {
                    db('shop_dispatch_area')->insert([
                        'shop_id' => SHOP_ID,
                        'residential_name' => $name,
                        'lat' => explode(',', $jwd)[1],
                        'lng' => explode(',', $jwd)[0]
                    ]);
                }
            }
            exit_json();
        }
        $geo_web_key = config('geo_web_key');
        $this->assign('key', $geo_web_key);
        $this->assign('jwd', $shop['location']);
        return $this->fetch();

    }

    /**
     * 搜索关键字设置
     */
    public function keywords()
    {
        $keywords = db("shop_keywords")->where('shop_id', SHOP_ID)->value('keywords');
        if (request()->isAjax()) {
            $keywords1 = str_replace("，", ",", trim(input('keywords')));
            $count = count(explode(",", $keywords1));
            if ($count > config('recommendKey')) {
                exit_json(-1, '推荐搜索关键字最多' . config('recommendKey') . '个');
            }
            db('shop_keywords')->where('shop_id', SHOP_ID)->delete();
            db('shop_keywords')->insert(['keywords' => $keywords1, 'shop_id' => SHOP_ID]);
            exit_json();
        } else {
            $this->assign('keystring', $keywords);
            return $this->fetch();
        }
    }

    /**
     * 公告列表
     */
    public function reportList()
    {
        $list = db('report')->where('shop_id', SHOP_ID)->select();
        $this->assign('list', $list);
        return $this->fetch();
    }

    /**
     * 推送公告
     */
    public function push()
    {
        $r_id = input('id');
        $report = model('report')->where('id', $r_id)->find();
        $url = __URL__ . url('Index/index/report', ['r_id', $r_id]);
        $res = pushMess($report['title'], ['url' => $url]);
        if ($res) {
            model('report')->save(['push_time'=>date('Y-m-d H:i:s')], ['id'=>$r_id]);
            exit_json();
        } else {
            exit_json(-1, '推送失败');
        }

    }

    /**
     * 添加店铺公告
     */
    public function report()
    {
        if (request()->isAjax()) {
            $title = input('title');
            $content = input('content');
            $data = [
                'title' => $title,
                'content' => $content,
                'shop_id' => SHOP_ID
            ];
            $res = model('report')->save($data);
            if ($res) {
                exit_json(1, '添加成功');
            } else {
                exit_json(-1, '添加失败');
            }
        }
        return $this->fetch();

    }

    /**
     * 首页轮播图设置
     */
    public function swiperList()
    {
        $list = model('swiper')->where(['shop_id'=>SHOP_ID])->select();
        $this->assign('list', $list);
        return $this->fetch();
        
    }

    /**
     * 添加轮播图
     */
    public function swiperAdd()
    {
        if(request()->isAjax()){
            $image = input('image');
            $content = input('content');
            $res = model('swiper')->save(['image'=>$image, 'content'=>$content, 'ord'=>input('ord'), 'shop_id'=>SHOP_ID, 'title'=>input('title')]);
            if($res){
                $id = model('swiper')->getLastInsID();
                $target_url = url('index/Index/swiper', ['s_id'=>$id]);
                model('swiper')->save(['target_url'=>$target_url], ['id'=>$id]);
                exit_json();
            }else{
                exit_json(-1, '保存失败');
            }
        }
        return $this->fetch();
    }

    /**
     * 轮播编辑
     */
    public function swiperEdit()
    {
        $s_id = input('id');
        $swiper = model('swiper')->where('id', $s_id)->find();
        if(request()->isAjax()){
            $res = $swiper->allowField(true)->save(input('post.'), ['id'=>$s_id]);
            if($res){
                exit_json(1, '编辑成功');
            }else{
                exit_json(-1,'操作失败');
            }
        }

        $this->assign('item', $swiper);
        return $this->fetch();
        
    }

    /**
     * 删除轮播图
     */
    public function swiperDel()
    {
        $id = input('id');
        $res = model('swiper')->where('id', $id)->delete();
        if($res){
            exit_json();
        }else{
            exit_json(-1, '删除失败');
        }
    }

    /**
     * 根据id删除数据
     */
    function delData()
    {
        $ids = input('idstr');
        $res = db('shop_dispatch_area')->where('id', 'in', $ids)->delete();
        if ($res) {
            exit_json();
        } else {
            exit_json('操作失败');
        }
    }

}
