<?php
/**
 * 购物车信息
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.5.22
 * Time: 11:12
 */

namespace app\app\controller;


use app\common\model\Goods;
use think\Log;

class ShopCart extends BaseUser
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        $this->checkShop(input('shop_id'));
    }

    /**
     * 添加购物车
     */
    public function addCart()
    {
        $shop_id = input('shop_id');
        $good_id = input('good_id');
        $prop_id = input('prop_id') ? input('prop_id') : 0;
        $num = input('num');
        $data = [
            'shop_id' => $shop_id,
            'good_id' => $good_id,
            'prop_id' => $prop_id,
            'user_id' => USER_ID,
            'num' => $num
        ];
        if($num < 0){
            exit_json(-1, '参数错误');
        }
        $goods = new Goods();
        $remain_count = $goods->getCount($good_id, $prop_id);
        if ($remain_count < $num) {
            exit_json(-1, '商品库存不足，当前库存剩余'.$remain_count);
        }
        $res = $this->validate($data, 'ShopCartValidate');
        if ($res !== true) {
            exit_json(-1, $res);
        } else {
            unset($data['num']);
            $cart = model('shopcart')->where($data)->find();
            if ($cart) {
                if ($num <= 0) {
                    $res = model('shopcart')->where($data)->delete();
                } else {
                    if($cart['num'] != $num){
                        //商品数量是否没有变更
                        $res = model('shopcart')->save(['num' => $num], $data);
                    }
                }
            } else {
                if($num <= 0){
                    exit_json(-1, '购物车内无此商品');
                }
                $data['num'] = $num;
                $res = model('shopcart')->save($data);
            }
            if ($res) {
                exit_json();
            } else {
                exit_json(-1, '添加购物车失败');
            }
        }
    }

    /**
     * 删除购物车商品
     */
    public function delCart()
    {
        $shop_id = input('shop_id');
        $good_id = input('good_id');
        $prop_id = input('prop_id') ? input('prop_id') : 0;
        $res = model('shopcart')->where([
            'shop_id' => $shop_id,
            'good_id' => $good_id,
            'prop_id' => $prop_id
        ])->delete();
        if($res){
            exit_json();
        }else{
            exit_json(-1, '操作失败');
        }

    }

    /**
     * 获取购物车列表
     */
    public function cartList()
    {
        $shop_id = input('shop_id');
        $cartList = model('shopcart')->field('good_id, prop_id, shop_id, num')->where(['shop_id' => $shop_id, 'user_id' => USER_ID])->select();
        $data = [];
        foreach ($cartList as $good) {
            $g = model('goods')->where('id', $good['good_id'])->find();
            $good['image'] = explode(',', $g['img'])[0];
            $good['active_price'] = $g['active_price'];
            $good['good_name'] = $g['name'];
            if ($good['prop_id'] == 0) {
                $good['prop_name'] = $g['guige']?$g['guige']:$g['goodattr'];
            } else {
                $p = db('goods_prop')->where('id', $good['prop_id'])->find();
                $good['prop_name'] = $p['prop_name'];
                $good['active_price'] = $p['prop_active_price'];
            }
            $good['total_money'] = sprintf('%.2f', $good['num'] * $good['active_price']);
            $data[] = $good;
        }
        exit_json(1, '请求成功', $data);
    }


}