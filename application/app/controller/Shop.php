<?php
/**
 * 店铺控制器
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018.5.2
 * Time: 09:50
 */

namespace app\app\controller;


use app\common\model\Goods;
use app\common\model\ShopCate;
use app\common\model\SixunOpera;
use app\common\model\Swiper;
use think\Log;

class Shop extends BaseUser
{
    protected function _initialize()
    {
        parent::_initialize(); // TODO: Change the autogenerated stub
        if (request()->action() != 'getShopInfo') {
            $this->checkShop(input('shop_id'));
        }
    }

    /**
     * 获取店铺列表
     */
    public function getShopList()
    {
        $shop_list = model('shop')->field('id, shopname, shoplogo, phone, address, create_time, location, limit_cost')->where('enable', 1)->select();
        exit_json(1, '请求成功', $shop_list);
    }


    /**
     * 获取店铺基本信息
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getShopInfo()
    {
        $shop_id = input('post.shop_id');
        $lat = input('post.lat');
        $lng = input('post.lng');
        $shopModel = new \app\common\model\Shop();
        if ($shop_id) {
            $shop = $shopModel->field('id, shopname, shoplogo, phone, address, create_time, location, limit_cost')->where('id', 'eq', $shop_id)->find();
        } else {
            if(!$lat || !$lng){
                $shop = $shopModel->field('id, shopname, shoplogo, phone, address, create_time, location, limit_cost')->where('is_default', 'eq', 1)->find();
            }else{
                //兼容IOS处理，测试账号删除购物车内所有数据
                if(USER_ID == 3370){
                    model('shopcart')->where('user_id', USER_ID)->delete();
                }


                $shopArr = $shopModel->field('id, shopname, shoplogo, phone, address, create_time, location, limit_cost')->where('enable', 'eq', 1)->select();
                $t = 0;
                $t_dis = 999999;
                if (is_array($shopArr) && count($shopArr) > 0) {
                    foreach ($shopArr as $k => $s) {
                        $location = explode(',', $s['location']);
                        if (count($location) != 2) {
                            continue;
                        }
                        $distance = GetDistance($lat, $lng, $location[1], $location[0]);
                        if ($k == 0) {
                            $t = $k;
                            $t_dis = $distance;
                        } else {
                            if ($distance < $t_dis) {
                                $t = $k;
                                $t_dis = $distance;
                            }
                        }
                    }
                    $shop = $shopArr[$t];
                } else {
                    $shop = $shopModel->field('id, shopname, shoplogo, phone, address, create_time, location, limit_cost')->where('is_default', 'eq', 1)->find();
                }
            }
        }
        exit_json(1, '请求成功', $shop);
    }


    /**
     * 获取首页轮播图
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getSwiper()
    {
        $shop_id = input('post.shop_id');
        $r = $this->checkShop($shop_id);
        if (!is_bool($r)) {
            exit_json(-1, $r);
        }
        $swiper = new Swiper();
        $res = $swiper->getSwiper($shop_id);
        exit_json(1, '请求成功', $res);
    }

    /**
     * 根据店铺id获取首页分类信息
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function getShopCateIndex()
    {
        $shop_id = input('post.shop_id');
        $r = $this->checkShop($shop_id);
        if (!is_bool($r)) {
            exit_json(-1, $r);
        }
        $shopCateModel = new ShopCate();
        $res = $shopCateModel->getCate($shop_id, 0, 1);
        exit_json(1, '请求成功', $res);
    }

    /**
     * 获取首页推荐商品
     */
    public function getGoodsIndex()
    {
        $shop_id = input('post.shop_id');
        $page = input('page');
        $page_num = input('page_num');
        $r = $this->checkShop($shop_id);
        if (!is_bool($r)) {
            exit_json(-1, $r);
        }
        $goodModel = new Goods();
        $extra = [
            'is_recommend' => 1,
            'is_live' => 1,
            'active_id'=>0
        ];
        $goodsList = $goodModel->getGoodsList($shop_id, $extra, $page, $page_num);
        exit_json(1, '请求成功', $goodsList);
    }

    /**
     * 获取商品信息
     */
    public function getGoodInfo()
    {
        $good_id = input('good_id');
        if (!$good_id) {
            exit_json(-1, '参数错误');
        }
        $good = model('goods')->where('id', $good_id)->find();
        $goodModel = new Goods();
        if ($good['id']) {
            $goodInfo = $goodModel->formatOne($good);
            $relationGoods = $goodModel->getRelationGoods($good['id']);
            $c = model('userCollection')->where(['user_id' => USER_ID, 'good_id' => $good_id])->find();
            if ($c['id'] > 0) {
                $is_collection = 1;
            } else {
                $is_collection = 0;
            }
            $data = [
                'goodInfo' => $goodInfo,
                'relationGoods' => $relationGoods,
                'is_collection' => $is_collection
            ];
            exit_json(1, '获取商品信息成功', $data);
        } else {
            exit_json(-1, '商品不存在');
        }
    }

    /**
     * 获取全部分类
     */
    public function getAllCate()
    {
        $shop_id = input('shop_id');
        $cates = model('shop_cate')->field('id, parent_id, name')->where('shop_id', $shop_id)->select();
        if (!$cates) {
            $cate_arr = [];
        } else {
            $cate_arr = getTree($cates, 0, 'parent_id');
        }
        exit_json(1, '请求成功', $cate_arr);
    }

    /**
     * 根据一级分类获取二级分类
     */
    public function getCateByPid()
    {
        $cate_pid = input('cate_pid');
        $cate_arr = model('shop_cate')->field('id, name')->where('parent_id', $cate_pid)->select();
        exit_json(1, '请求成功', $cate_arr);
    }

    /**
     * 根据二级分类id获取商品列表
     */
    public function getGoodsByCateId()
    {
        $cate_id = input('cate_id');
        $shop_id = input('shop_id');
        $page = input('page');
        $page_num = input('page_num');
        $goodModel = new Goods();
        $extra = [
            'cate_id' => $cate_id,
            'shop_id' => $shop_id,
            'is_live' => 1,
            'active_id'=>0
        ];
        $goodList = $goodModel->getGoodsList($shop_id, $extra, $page, $page_num);
        exit_json(1, '请求成功', $goodList);
    }

    /**
     * 添加收藏
     */
    public function setCollection()
    {
        $type = input('type');
        $good_id = input('good_id');
        $good = model('goods')->where('id', $good_id)->find();
        if (!$good['id'] > 0) {
            exit_json(-1, '商品信息错误');
        }
        $data = [
            'user_id' => USER_ID,
            'good_id' => $good_id,
            'shop_id' => $good['shop_id'],
            'cate_id' => $good['cate_id']
        ];
        if ($type == 1) {
            if (model('userCollection')->where($data)->find()) {
                exit_json();
            }
            $res = model('userCollection')->save($data);
        } else {
            $res = model('userCollection')->where($data)->delete();
        }
        if ($res) {
            exit_json();
        } else {
            exit_json(-1, '操作失败');
        }
    }

    /**
     * 商品扫码
     */
    public function scanQrCode()
    {
        $shop_id = input('shop_id');
        $gno = input('gno');
        $g = model('goods')->where(['gno' => $gno, 'shop_id' => $shop_id, 'is_live' => 1])->find();
        if (!$g) {
            exit_json(-1, '商品不存在');
        }
        $good = new Goods();
        exit_json(1, '请求成功', $good->formatOne($g));
    }

    /**
     * 关键字搜索商品
     */
    public function searchByKeywords()
    {
        $keywords = trim(input('keywords'));
        $page = input('page') ? input('page') : 1;
        $pageNum = input('pageNum') ? input('pageNum') : 10;
        if ($keywords == "") {
            exit_json(-1, '关键字不能为空');
        }
        $shop_id = input('shop_id');
        $where = 'shop_id=' . $shop_id . ' and is_live=1';
        for ($i = 0; $i < mb_strlen($keywords, 'utf-8'); $i++) {
            $where .= " and name like '%" . mb_substr($keywords, $i, 1, 'utf-8') . "%' ";
        }
        $keyModel = model('keywords');
        $is_exist = $keyModel->where(['keywords' => $keywords, 'user_id' => USER_ID])->find();
        if ($is_exist) {
            $keyModel->save(['is_del' => 0], ['keywords' => $keywords, 'user_id' => USER_ID]);
        } else {
            $keyModel->save([
                'keywords' => $keywords,
                'user_id' => USER_ID
            ]);
        }
        $offset = ($page - 1) * $pageNum;
        $goods = model('goods');
        $goodList = $goods->where($where)->limit($offset, $pageNum)->select();
        exit_json(1, '请求成功', $goods->goodsFormat($goodList));
    }

    /**
     * 获取热门搜索关键字
     */
    public function getHotKeyWords()
    {
        $hotKey = model('Keywords');
        $keywords = $hotKey->hotKeys();
        exit_json(1, '请求成功', $keywords);
    }

    /**
     * 获取搜索历史记录
     */
    public function getSearchHistory()
    {
        $keyword = model('keywords');
        $keywords = $keyword->where(['user_id' => USER_ID, 'is_del' => 0])->column('keywords');
        exit_json(1, '请求成功', $keywords);
    }

    /**
     * 删除搜索记录
     */
    public function delHistory()
    {
        $keyword = model('keywords');
        $keywords = $keyword->save(['is_del' => 1], ['user_id' => USER_ID]);
        exit_json();
    }

    /**
     * 获取店铺推荐搜索
     */
    public function getRecommendWord()
    {
        $shop_id = input('shop_id');
        $key = db('shop_keywords')->where('shop_id', $shop_id)->value('keywords');
        exit_json(1, '请求成功', $key ? explode(",", $key) : []);
    }

    /**
     * 获取量贩商品
     */
    public function getCombineGoods()
    {
        $shop_id = input('shop_id');
        $list = model('goods')->alias('a')->join('shop_cate b', 'a.cate_id=b.id')->field('a.*, b.name cate_name')->where(['a.shop_id'=>$shop_id, 'a.combine_sta'=>1, 'a.active_id'=>0, 'a.is_live'=>1])->select();
        $data = [];
        foreach ($list as $v){
            $data[$v['cate_name']][] = model('goods')->formatOne($v);
        }
        $res = [];
        foreach ($data as $key=>$val){
            $res[] = [
                'cate_name'=>$key,
                'good_list'=>$val
            ];
        }
        exit_json(1, '请求成功', $res);
    }

    /**
     * 获取限时抢购商品
     */
    public function getSecGoods()
    {
        $shop_id = input('shop_id');
        $type = input('type');
        $now = date('Y-m-d H:i:s');
        if($type == 1){
            //正在进行中
            $act_goods = db('sec_active')->alias('a')->join('goods b', 'a.good_id=b.id')->field('a.start_time, a.end_time, a.status act_status, b.*')->where("a.status=1 and a.shop_id=$shop_id and a.start_time<'$now' and a.end_time>'$now'")->select();
        }elseif ($type == 2){
            //活动即将开始
            $act_goods = db('sec_active')->alias('a')->join('goods b', 'a.good_id=b.id')->field('a.start_time, a.end_time, a.status act_status, b.*')->where("a.status=1 and a.shop_id=$shop_id and a.start_time>'$now'")->select();
        }else{
            exit_json(-1, '参数错误');
        }
        $good = new Goods();
        $data = [];
        foreach ($act_goods as $v){
            $act_ext = [
                'start_time'=>$v['start_time'],
                'end_time'=>$v['end_time'],
                'status'=>$v['act_status']
            ];
            $act = $good->formatOne($v);
            $act['act_ext'] = $act_ext;
            $data[] = $act;
        }
        exit_json(1, '请求成功', $data);
    }

    /**
     * 获取积分兑换商品
     */
    public function getScoreGood()
    {
        $shop_id = input('shop_id');
        $gift = db('gift')->where('shop_id', $shop_id)->field('id, good_name, good_price, score, num, image')->select();
        exit_json(1, '请求成功', $gift);
    }

    /**
     * 兑换商品
     */
    public function makeScoreOrder()
    {
        $good_id = input('good_id');
        $address = input('address');
        $name = input('name');
        $telephone = input('telephone');
        $remarks = input('remarks');
        $gift = db('gift')->where('id', $good_id)->find();
        $branch_no = model('shop')->where('id', $gift['shop_id'])->value('fendian');
        if($gift['num']<=0){
            exit_json(-1, '库存不足');
        }else{
            model('score_log')->startTrans();
            model('order_score')->startTrans();
            model('user')->startTrans();
            try{
                $user = model('user')->where('id', USER_ID)->find();
                $sixun = new SixunOpera();
                $consume_card = $sixun->getConsume($user['card_id'], $branch_no);

                if(!$consume_card || $consume_card['vip_acc_amount']-$consume_card['vip_minus_total']<$gift['score']){
                    exit_json(-1, '当前店铺下积分不足');
                }else{
                    model('score_log')->save(['score'=>$gift['score'], 'type'=>2, 'user_id'=>USER_ID, 'desc'=>'积分兑换商品']);
                    $sixun->setConsume($user['card_id'], $gift['score'], $branch_no);
                }
                $res = model('order_score')->save(['good_id'=>$good_id, 'address'=>$address, 'name'=>$name, 'telephone'=>$telephone,'remarks'=>$remarks, 'user_id'=>USER_ID, 'shop_id'=>$gift['shop_id']]);
            }catch (\Exception $e){
                model('score_log')->rollback();
                model('order_score')->rollback();
                model('user')->rollback();
                Log::error('积分兑换'.$e->getMessage());
            }
            if($res){
                db('gift')->where('id', $good_id)->setDec('num', 1);
                model('score_log')->commit();
                model('order_score')->commit();
                model('user')->commit();
                exit_json();
            }else{
                model('score_log')->rollback();
                model('order_score')->rollback();
                model('user')->rollback();
                exit_json(-1, '操作失败');
            }
        }
    }

    /**
     * 添加抢购提醒
     */
    public function addTips()
    {
        $good_id = input('good_id');
        $shop_id = input('shop_id');
        $sec = db('sec_active')->where(['good_id'=>$good_id, 'shop_id'=>$shop_id])->order('start_time desc')->find();
        $s = db('sec_tips')->where('sec_id', $sec['id'])->where('user_id', USER_ID)->find();
        if($s){
            exit_json(-1, '已设置提醒');
        }
        $res = db('sec_tips')->insert(['sec_id'=>$sec['id'], 'shop_id'=>$shop_id, 'user_id'=>USER_ID, 'tips_time'=>strtotime($sec['start_time'])]);
        if($res){
            exit_json();
        }else{
            exit_json(-1, '设置失败，刷新后请重试');
        }
    }

}