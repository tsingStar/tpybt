<?php
/**
 * 申请退款订单
 * Created by PhpStorm.
 * User: Administrator
 * Date: 2018-06-20
 * Time: 17:10
 */

namespace app\common\model;


use think\Model;

class OrderRefund extends Model
{
    protected function initialize()
    {
        parent::initialize(); // TODO: Change the autogenerated stub
    }

    protected $autoWriteTimestamp = true;

    /**
     * 订单退款
     * @throws \think\Exception
     * @throws \think\db\exception\DataNotFoundException
     * @throws \think\db\exception\ModelNotFoundException
     * @throws \think\exception\DbException
     */
    public function refundOrder($order_no)
    {
        $this->where('order_no', $order_no)->find();
        $order = model('order')->where('id', $this->getAttr('order_id'))->find();
        if ($order['pay_type'] == 3) {
            $res = model('user')->where('id', $order['user_id'])->setInc('cost', $this->getAttr('money'));
            //退款写入思迅余额
            $user = model('user')->where('id', $order['user_id'])->find();
            $sixun = new SixunOpera();
            $card = $sixun->getCardInfo($user['card_id']);
            $cost = $card['cost']+$this->getAttr('money');
            $sixun->set_residual_amt($cost, $user['card_id']);
            //退款写入思迅余额
        } else {
            $pay = new Pay();
            $res = $pay->refundOrder($this->getAttr('id'), $this->getAttr('money'));
        }
        if($res){
            $order->save(['is_apply_refund'=>2]);
            //订单退款
            $moneyLog = new MoneyLog();
            $moneyLog->writeLog($order['user_id'], $this->getAttr('money'), config('pay_type')[$order['pay_type']], '订单退款', $order['order_no']);
            //退款冲减会员积分
            $user = model('user')->where('id', $order['user_id'])->find();
            $user->setDec('score', $this->getAttr('money'));
            model('ScoreLog')->save([
                'score'=>$this->getAttr('money'),
                'type'=>2,
                'user_id'=>$order['user_id']
            ]);
            return true;
        }else{
            return false;
        }
    }


}